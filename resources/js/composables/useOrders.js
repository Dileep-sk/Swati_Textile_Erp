import { ref, watch, onMounted, createApp, nextTick } from 'vue'
import { fetchOrder, updateOrderStatus } from '@/services/orderService'
import toastr from 'toastr'
import { confirmDialog } from '@/utils/confirmDialog'
import jsPDF from 'jspdf'

import OrderPDFTemplate from '@/components/OrderPDFTemplate.vue'

export function useOrders(searchTerm = ref('')) {
    const orders = ref([])
    const loading = ref(false)
    const error = ref(null)
    const currentPage = ref(1)
    const perPage = ref(10)
    const lastPage = ref(1)
    const totalItems = ref(0)

    const loadOrders = async (page = 1, search = '') => {
        loading.value = true
        error.value = null
        try {
            const params = {
                page,
                per_page: perPage.value,
                search: search || undefined,
            }

            const data = await fetchOrder(params)
            console.log("Order API Response:", data)

            orders.value = data.data?.data || []
            currentPage.value = data.data?.current_page || 1
            lastPage.value = data.data?.last_page || 1
            totalItems.value = data.data?.total || 0
        } catch (err) {
            error.value = err.response?.data?.message || err.message || 'Failed to fetch orders'
            toastr.error(error.value, 'Error')
        } finally {
            loading.value = false
        }
    }

    const handleStatusToggle = async (row, newStatus) => {
        const oldStatus = row.status
        const statusText =
            newStatus === 0 ? 'set Pending' :
                newStatus === 1 ? 'put on Hold' :
                    'mark as Success'

        const confirmed = await confirmDialog(statusText, `Yes, ${statusText}`)
        if (!confirmed) return

        row.status = newStatus

        try {
            await updateOrderStatus(row.id, newStatus)
            toastr.success(`Order successfully ${statusText}`, 'Success')
        } catch (err) {
            row.status = oldStatus
            toastr.error(
                err.response?.data?.message || 'Failed to update order status',
                'Error'
            )
        }
    }


    // const exportOrderPDF = (order) => {
    //     if (!order) return

    //     const doc = new jsPDF()

    //     doc.setFontSize(18)
    //     doc.text('Order Details', 14, 20)

    //     doc.setFontSize(12)
    //     doc.text(`Order No: ${order.order_no}`, 14, 30)
    //     doc.text(`Design No: ${order.design_no}`, 14, 40)
    //     doc.text(`Item: ${order.item_name}`, 14, 50)
    //     doc.text(`Quantity: ${order.quantity}`, 14, 60)
    //     doc.text(`Status: ${order.status}`, 14, 70)

    //     doc.save(`Order_${order.order_no}.pdf`)
    // }


    const exportOrderPDF = (order) => {
        const pdf = new jsPDF('p', 'mm', 'a4')
        const pageWidth = pdf.internal.pageSize.getWidth()

        // Header Background
        pdf.setFillColor(245, 222, 179) // light beige
        pdf.rect(0, 0, pageWidth, 50, 'F')

        // Company Name
        pdf.setFontSize(22)
        pdf.setTextColor(128, 0, 0) // dark red
        pdf.text('SWATI FAB TEX', pageWidth / 2, 20, { align: 'center' })

        pdf.setFontSize(10)
        pdf.setTextColor(0)
        pdf.text('GSTIN: 24ADIFS5497C1ZV', pageWidth / 2, 27, { align: 'center' })
        pdf.text('F-1050, Laxmi Villa Textiles Parks, Sachin GIDC, Surat', pageWidth / 2, 32, { align: 'center' })

        // Order Info Box
        pdf.setDrawColor(0)
        pdf.rect(10, 40, 190, 20) // M/s. and Add.
        pdf.text(`M/s.: ${order.customer_name || ''}`, 12, 45)
        pdf.text(`Order No.: ${order.order_no || ''}`, 150, 45)
        pdf.text(`Date: ${order.date || ''}`, 150, 50)

        // Table Header
        pdf.setFillColor(200, 0, 0) // red
        pdf.setTextColor(255, 255, 255)
        pdf.rect(10, 70, 190, 10, 'F')
        pdf.text('Sr. No', 12, 77)
        pdf.text('Description', 30, 77)
        pdf.text('Design No.', 120, 77)
        pdf.text('Pcs.', 150, 77)
        pdf.text('Rate', 170, 77)

        // Table Rows
        pdf.setTextColor(0)
        let y = 87
        order.items?.forEach((item, index) => {
            pdf.text(`${index + 1}`, 12, y)
            pdf.text(`${item.description}`, 30, y)
            pdf.text(`${item.design_no}`, 120, y)
            pdf.text(`${item.pcs}`, 150, y)
            pdf.text(`${item.rate}`, 170, y)
            y += 8
        })

        // Footer
        pdf.setFontSize(10)
        pdf.text('Generated by Swati Textile ERP', 10, y + 10)

        pdf.save(`Order_${order.order_no}.pdf`)
    }




    // ðŸ”¹ debounce search
    let debounceTimeout = null
    watch(searchTerm, (val) => {
        clearTimeout(debounceTimeout)
        debounceTimeout = setTimeout(() => {
            loadOrders(1, val)
        }, 500)
    })

    // ðŸ”¹ initial load
    onMounted(() => {
        loadOrders()
    })

    return {
        orders,
        loading,
        error,
        currentPage,
        perPage,
        lastPage,
        totalItems,
        loadOrders,
        handleStatusToggle,
        exportOrderPDF,
    }
}
